<style lang="less">
  .play{
    .blur{
      position:fixed;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      filter:blur(40rpx);
      z-index: -1;
    }
    .pic{
      width: 80%;
      margin-left: 10%;
      margin-top:40rpx;
    }
    .song-name{
      color:white;
      width:100%;
      text-align:center;
      margin-top: 40rpx;
    }
    .play-progress{
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: white;
      padding-left: 40rpx;
      padding-right: 40rpx;
      margin:40rpx 0;
      font-size: 30rpx;
      slider{
        width:60%;
        flex-shrink:1;
      }
    }
    .play-controls{
      display:flex;
      justify-content:space-between;
      align-items:center;
      padding-left:40rpx;
      padding-right:40rpx;
      .prev{
        rotate:180deg;
        width:60rpx;
        height:60rpx;
      }
      .next{
        width:60rpx;
        height:60rpx;
      }
      .pauses{
        width:100rpx;
        height:100rpx;
      }
      .play{
        width:100rpx;
        height:100rpx;
      }
    }
  }
</style>
<template>
  <view class="play">
    <image mode="widthFix" class="pic" src="{{track.al.picUrl}}"></image>
    <image class="blur" src="{{track.al.picUrl}}"></image>
    <view class="song-name">{{track.al.name}}</view>
    <view class="play-progress">
      <text class="playedTime">{{playedTime}}</text>
      <slider bindchange="changePlay" value="{{value}}" block-size="12" bindchange="slider3change" bindchange="{{changePlay}}"/>
      <text class="duration">{{duration}}</text>
    </view>
    <view class="play-controls">
      <image @tap="prev" class="prev" src="../assets/images/right.png"></image>
      <image @tap="audioPause" style="display:{{isPlaying?'block':'none'}}" class="pauses" src="../assets/images/pauses.png"></image>
      <image @tap="audioPlay" style="display:{{isPlaying?'none':'block'}}" class="play" src="../assets/images/plays.png"></image>
      <image @tap="next" class="next" src="../assets/images/right.png"></image>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Urls from '../mixins/urls';
  import { connect, getStore } from 'wepy-redux'
  import { GET, NEXT, PREV } from '../store/types/play'
  import { getPlay } from '../store/actions/play'

  @connect({
    rankDetail (state) {
      console.log("play @connect")
      console.log(state)
      return state.rankDetail.rankDetail
    },
    play (state){
      return state.play.play
    }
  },{
    getPlay
  })

  export default class Play extends wepy.page {
    data = {
      playedTime:"00:00",
      value:0,
      isPlaying:true,
      duration:"00:00",
      id:0,
      index:0,
      number:0,
      track:{},
      audioCtx:""
    }
    mixins = [Urls]

    methods = {
      audioPlay() {
        this.audioCtx.play()
        this.isPlaying = true;
      },
      audioPause() {
        this.audioCtx.pause()
        this.isPlaying = false;
      },
      changePlay(ev){
        let pos = (ev.detail.value/100)*this.audioCtx.duration
        this.audioCtx.seek(pos)
      },
      prev(){
        console.log("prev")
        this.number = this.number>1?parseInt(this.number) -1: 0;
      },
      next(){
        console.log("next")
        this.number = this.number < this.rankDetail[this.index].tracks.length ?parseInt(this.number) +1: this.number;
      }
    }
    formatTime(time){
      var min = Math.floor(parseInt(time)/60)
      var sec = Math.floor(parseInt(time)%60)
      return (min< 10? "0"+min: min) + ":" + (sec<10?"0"+sec: sec)
    }
    updateTime(){
        let self = this;
        this.audioCtx.onTimeUpdate(()=>{
          console.log("console audio src currentTime duration in onTimeUpdate")
          console.log(self.audioCtx.src)
          console.log(self.audioCtx.currentTime)
          console.log(self.audioCtx.duration)
          self.playedTime = self.formatTime(self.audioCtx.currentTime)
          self.duration = self.formatTime(self.audioCtx.duration)
          self.value = Math.floor(self.audioCtx.currentTime/self.audioCtx.duration)*100
          self.$apply();
        })
    }
    watch = {
      play (newValue, oldValue){
        console.log("play page watch")
        console.log("newValue")
        console.log(newValue)
        console.log("oldValue")
        console.log(oldValue)
        console.log(this.play)
        this.audioCtx.src = newValue;
        this.audioCtx.title = this.track.al.name;
        this.audioCtx.singer = this.track.ar[0].name;
        this.audioCtx.coverImgUrl  = this.track.al.picUrl;
        this.isPlaying = !this.audioCtx.paused
      },
      track(newValue, oldValue){
        wepy.setNavigationBarTitle({title: newValue.name})
      },
      number(newValue, oldValue){
        console.log("number changed")
        console.log(newValue)
        console.log(oldValue)
        this.track = this.rankDetail[this.index].tracks[newValue]
        this.id = this.track.id;
        this.dispatchGetPlay()
      }
    }
    dispatchGetPlay(){
      console.log("dispatchGetPlay")
      console.log(this.id)
      console.log(this.track)
      let url = this.baseUrl+"/music/url?id="+this.id;
      const store = getStore()
      store.dispatch(getPlay(url,this.id))
    }
    onLoad(option){
      let self = this;
      console.log("this")
      console.log(this)
      console.log("parent")
      console.log(this.$parent)
      console.log("play page onLoad")
      console.log("play this.play")
      console.log(this.play)
      this.index = option.index;
      this.number = option.number;
      this.track = this.rankDetail[this.index].tracks[this.number]
      this.id = this.track.id;
      this.dispatchGetPlay();
      console.log("audioCtx")
      this.audioCtx = this.$parent.globalData.audioManager;
      console.log("track is")
      console.log(this.track)
      this.updateTime();
      this.audioCtx.onPlay(()=>{
        self.isPlaying = true;
      })
      this.audioCtx.onPause(()=>{
        self.isPlaying = false;
      })
      this.audioCtx.onStop(()=>{

      })
      this.audioCtx.onEnded(()=>{

      })
      this.audioCtx.onPrev(()=>{

      })
      this.audioCtx.onNext(()=>{

      })
    }
}
</script>
